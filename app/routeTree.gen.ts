/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ServicesImport } from './routes/services'
import { Route as ResourcesImport } from './routes/resources'
import { Route as RedirectImport } from './routes/redirect'
import { Route as FaqImport } from './routes/faq'
import { Route as DeferredImport } from './routes/deferred'
import { Route as ContactImport } from './routes/contact'
import { Route as CaseStudiesImport } from './routes/case-studies'
import { Route as CareersImport } from './routes/careers'
import { Route as BlogImport } from './routes/blog'
import { Route as AboutImport } from './routes/about'
import { Route as PathlessLayoutImport } from './routes/_pathlessLayout'
import { Route as UsersRouteImport } from './routes/users.route'
import { Route as PostsRouteImport } from './routes/posts.route'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users.index'
import { Route as PostsIndexImport } from './routes/posts.index'
import { Route as UsersUserIdImport } from './routes/users.$userId'
import { Route as ServicesTransformationImport } from './routes/services/transformation'
import { Route as ServicesConsultingImport } from './routes/services/consulting'
import { Route as ServicesAutomationImport } from './routes/services/automation'
import { Route as ResourcesWhitepapersImport } from './routes/resources/whitepapers'
import { Route as ResourcesWebinarsImport } from './routes/resources/webinars'
import { Route as PostsPostIdImport } from './routes/posts.$postId'
import { Route as AboutTeamImport } from './routes/about/team'
import { Route as AboutStoryImport } from './routes/about/story'
import { Route as PathlessLayoutNestedLayoutImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PostsPostIdDeepImport } from './routes/posts_.$postId.deep'
import { Route as PathlessLayoutNestedLayoutRouteBImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteAImport } from './routes/_pathlessLayout/_nested-layout/route-a'

// Create/Update Routes

const ServicesRoute = ServicesImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRoute,
} as any)

const ResourcesRoute = ResourcesImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRoute,
} as any)

const RedirectRoute = RedirectImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRoute,
} as any)

const FaqRoute = FaqImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRoute,
} as any)

const DeferredRoute = DeferredImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const CaseStudiesRoute = CaseStudiesImport.update({
  id: '/case-studies',
  path: '/case-studies',
  getParentRoute: () => rootRoute,
} as any)

const CareersRoute = CareersImport.update({
  id: '/careers',
  path: '/careers',
  getParentRoute: () => rootRoute,
} as any)

const BlogRoute = BlogImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutRoute = PathlessLayoutImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRoute,
} as any)

const UsersRouteRoute = UsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRoute,
} as any)

const PostsRouteRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)

const PostsIndexRoute = PostsIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)

const UsersUserIdRoute = UsersUserIdImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)

const ServicesTransformationRoute = ServicesTransformationImport.update({
  id: '/transformation',
  path: '/transformation',
  getParentRoute: () => ServicesRoute,
} as any)

const ServicesConsultingRoute = ServicesConsultingImport.update({
  id: '/consulting',
  path: '/consulting',
  getParentRoute: () => ServicesRoute,
} as any)

const ServicesAutomationRoute = ServicesAutomationImport.update({
  id: '/automation',
  path: '/automation',
  getParentRoute: () => ServicesRoute,
} as any)

const ResourcesWhitepapersRoute = ResourcesWhitepapersImport.update({
  id: '/whitepapers',
  path: '/whitepapers',
  getParentRoute: () => ResourcesRoute,
} as any)

const ResourcesWebinarsRoute = ResourcesWebinarsImport.update({
  id: '/webinars',
  path: '/webinars',
  getParentRoute: () => ResourcesRoute,
} as any)

const PostsPostIdRoute = PostsPostIdImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)

const AboutTeamRoute = AboutTeamImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => AboutRoute,
} as any)

const AboutStoryRoute = AboutStoryImport.update({
  id: '/story',
  path: '/story',
  getParentRoute: () => AboutRoute,
} as any)

const PathlessLayoutNestedLayoutRoute = PathlessLayoutNestedLayoutImport.update(
  {
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any,
)

const PostsPostIdDeepRoute = PostsPostIdDeepImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRoute,
} as any)

const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteAImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRoute
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogImport
      parentRoute: typeof rootRoute
    }
    '/careers': {
      id: '/careers'
      path: '/careers'
      fullPath: '/careers'
      preLoaderRoute: typeof CareersImport
      parentRoute: typeof rootRoute
    }
    '/case-studies': {
      id: '/case-studies'
      path: '/case-studies'
      fullPath: '/case-studies'
      preLoaderRoute: typeof CaseStudiesImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredImport
      parentRoute: typeof rootRoute
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqImport
      parentRoute: typeof rootRoute
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectImport
      parentRoute: typeof rootRoute
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesImport
      parentRoute: typeof rootRoute
    }
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesImport
      parentRoute: typeof rootRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutImport
      parentRoute: typeof PathlessLayoutImport
    }
    '/about/story': {
      id: '/about/story'
      path: '/story'
      fullPath: '/about/story'
      preLoaderRoute: typeof AboutStoryImport
      parentRoute: typeof AboutImport
    }
    '/about/team': {
      id: '/about/team'
      path: '/team'
      fullPath: '/about/team'
      preLoaderRoute: typeof AboutTeamImport
      parentRoute: typeof AboutImport
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdImport
      parentRoute: typeof PostsRouteImport
    }
    '/resources/webinars': {
      id: '/resources/webinars'
      path: '/webinars'
      fullPath: '/resources/webinars'
      preLoaderRoute: typeof ResourcesWebinarsImport
      parentRoute: typeof ResourcesImport
    }
    '/resources/whitepapers': {
      id: '/resources/whitepapers'
      path: '/whitepapers'
      fullPath: '/resources/whitepapers'
      preLoaderRoute: typeof ResourcesWhitepapersImport
      parentRoute: typeof ResourcesImport
    }
    '/services/automation': {
      id: '/services/automation'
      path: '/automation'
      fullPath: '/services/automation'
      preLoaderRoute: typeof ServicesAutomationImport
      parentRoute: typeof ServicesImport
    }
    '/services/consulting': {
      id: '/services/consulting'
      path: '/consulting'
      fullPath: '/services/consulting'
      preLoaderRoute: typeof ServicesConsultingImport
      parentRoute: typeof ServicesImport
    }
    '/services/transformation': {
      id: '/services/transformation'
      path: '/transformation'
      fullPath: '/services/transformation'
      preLoaderRoute: typeof ServicesTransformationImport
      parentRoute: typeof ServicesImport
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdImport
      parentRoute: typeof UsersRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexImport
      parentRoute: typeof PostsRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof UsersRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteAImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBImport
      parentRoute: typeof PathlessLayoutNestedLayoutImport
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface AboutRouteChildren {
  AboutStoryRoute: typeof AboutStoryRoute
  AboutTeamRoute: typeof AboutTeamRoute
}

const AboutRouteChildren: AboutRouteChildren = {
  AboutStoryRoute: AboutStoryRoute,
  AboutTeamRoute: AboutTeamRoute,
}

const AboutRouteWithChildren = AboutRoute._addFileChildren(AboutRouteChildren)

interface ResourcesRouteChildren {
  ResourcesWebinarsRoute: typeof ResourcesWebinarsRoute
  ResourcesWhitepapersRoute: typeof ResourcesWhitepapersRoute
}

const ResourcesRouteChildren: ResourcesRouteChildren = {
  ResourcesWebinarsRoute: ResourcesWebinarsRoute,
  ResourcesWhitepapersRoute: ResourcesWhitepapersRoute,
}

const ResourcesRouteWithChildren = ResourcesRoute._addFileChildren(
  ResourcesRouteChildren,
)

interface ServicesRouteChildren {
  ServicesAutomationRoute: typeof ServicesAutomationRoute
  ServicesConsultingRoute: typeof ServicesConsultingRoute
  ServicesTransformationRoute: typeof ServicesTransformationRoute
}

const ServicesRouteChildren: ServicesRouteChildren = {
  ServicesAutomationRoute: ServicesAutomationRoute,
  ServicesConsultingRoute: ServicesConsultingRoute,
  ServicesTransformationRoute: ServicesTransformationRoute,
}

const ServicesRouteWithChildren = ServicesRoute._addFileChildren(
  ServicesRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/users'
    | ''
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/users'
    | '/_pathlessLayout'
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/_pathlessLayout/_nested-layout'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  AboutRoute: typeof AboutRouteWithChildren
  BlogRoute: typeof BlogRoute
  CareersRoute: typeof CareersRoute
  CaseStudiesRoute: typeof CaseStudiesRoute
  ContactRoute: typeof ContactRoute
  DeferredRoute: typeof DeferredRoute
  FaqRoute: typeof FaqRoute
  RedirectRoute: typeof RedirectRoute
  ResourcesRoute: typeof ResourcesRouteWithChildren
  ServicesRoute: typeof ServicesRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  AboutRoute: AboutRouteWithChildren,
  BlogRoute: BlogRoute,
  CareersRoute: CareersRoute,
  CaseStudiesRoute: CaseStudiesRoute,
  ContactRoute: ContactRoute,
  DeferredRoute: DeferredRoute,
  FaqRoute: FaqRoute,
  RedirectRoute: RedirectRoute,
  ResourcesRoute: ResourcesRouteWithChildren,
  ServicesRoute: ServicesRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/posts",
        "/users",
        "/_pathlessLayout",
        "/about",
        "/blog",
        "/careers",
        "/case-studies",
        "/contact",
        "/deferred",
        "/faq",
        "/redirect",
        "/resources",
        "/services",
        "/posts_/$postId/deep"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/posts": {
      "filePath": "posts.route.tsx",
      "children": [
        "/posts/$postId",
        "/posts/"
      ]
    },
    "/users": {
      "filePath": "users.route.tsx",
      "children": [
        "/users/$userId",
        "/users/"
      ]
    },
    "/_pathlessLayout": {
      "filePath": "_pathlessLayout.tsx",
      "children": [
        "/_pathlessLayout/_nested-layout"
      ]
    },
    "/about": {
      "filePath": "about.tsx",
      "children": [
        "/about/story",
        "/about/team"
      ]
    },
    "/blog": {
      "filePath": "blog.tsx"
    },
    "/careers": {
      "filePath": "careers.tsx"
    },
    "/case-studies": {
      "filePath": "case-studies.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/deferred": {
      "filePath": "deferred.tsx"
    },
    "/faq": {
      "filePath": "faq.tsx"
    },
    "/redirect": {
      "filePath": "redirect.tsx"
    },
    "/resources": {
      "filePath": "resources.tsx",
      "children": [
        "/resources/webinars",
        "/resources/whitepapers"
      ]
    },
    "/services": {
      "filePath": "services.tsx",
      "children": [
        "/services/automation",
        "/services/consulting",
        "/services/transformation"
      ]
    },
    "/_pathlessLayout/_nested-layout": {
      "filePath": "_pathlessLayout/_nested-layout.tsx",
      "parent": "/_pathlessLayout",
      "children": [
        "/_pathlessLayout/_nested-layout/route-a",
        "/_pathlessLayout/_nested-layout/route-b"
      ]
    },
    "/about/story": {
      "filePath": "about/story.tsx",
      "parent": "/about"
    },
    "/about/team": {
      "filePath": "about/team.tsx",
      "parent": "/about"
    },
    "/posts/$postId": {
      "filePath": "posts.$postId.tsx",
      "parent": "/posts"
    },
    "/resources/webinars": {
      "filePath": "resources/webinars.tsx",
      "parent": "/resources"
    },
    "/resources/whitepapers": {
      "filePath": "resources/whitepapers.tsx",
      "parent": "/resources"
    },
    "/services/automation": {
      "filePath": "services/automation.tsx",
      "parent": "/services"
    },
    "/services/consulting": {
      "filePath": "services/consulting.tsx",
      "parent": "/services"
    },
    "/services/transformation": {
      "filePath": "services/transformation.tsx",
      "parent": "/services"
    },
    "/users/$userId": {
      "filePath": "users.$userId.tsx",
      "parent": "/users"
    },
    "/posts/": {
      "filePath": "posts.index.tsx",
      "parent": "/posts"
    },
    "/users/": {
      "filePath": "users.index.tsx",
      "parent": "/users"
    },
    "/_pathlessLayout/_nested-layout/route-a": {
      "filePath": "_pathlessLayout/_nested-layout/route-a.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/_pathlessLayout/_nested-layout/route-b": {
      "filePath": "_pathlessLayout/_nested-layout/route-b.tsx",
      "parent": "/_pathlessLayout/_nested-layout"
    },
    "/posts_/$postId/deep": {
      "filePath": "posts_.$postId.deep.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
