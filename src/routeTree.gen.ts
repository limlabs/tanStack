/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as ServicesRouteImport } from './routes/services'
import { Route as ResourcesRouteImport } from './routes/resources'
import { Route as RedirectRouteImport } from './routes/redirect'
import { Route as FaqRouteImport } from './routes/faq'
import { Route as DeferredRouteImport } from './routes/deferred'
import { Route as ContactRouteImport } from './routes/contact'
import { Route as CaseStudiesRouteImport } from './routes/case-studies'
import { Route as CareersRouteImport } from './routes/careers'
import { Route as BlogRouteImport } from './routes/blog'
import { Route as AboutRouteImport } from './routes/about'
import { Route as PathlessLayoutRouteImport } from './routes/_pathlessLayout'
import { Route as UsersRouteRouteImport } from './routes/users.route'
import { Route as PostsRouteRouteImport } from './routes/posts.route'
import { Route as IndexRouteImport } from './routes/index'
import { Route as UsersIndexRouteImport } from './routes/users.index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as UsersUserIdRouteImport } from './routes/users.$userId'
import { Route as ServicesTransformationRouteImport } from './routes/services/transformation'
import { Route as ServicesConsultingRouteImport } from './routes/services/consulting'
import { Route as ServicesAutomationRouteImport } from './routes/services/automation'
import { Route as ResourcesWhitepapersRouteImport } from './routes/resources/whitepapers'
import { Route as ResourcesWebinarsRouteImport } from './routes/resources/webinars'
import { Route as PostsPostIdRouteImport } from './routes/posts.$postId'
import { Route as AboutTeamRouteImport } from './routes/about/team'
import { Route as AboutStoryRouteImport } from './routes/about/story'
import { Route as PathlessLayoutNestedLayoutRouteImport } from './routes/_pathlessLayout/_nested-layout'
import { Route as PostsPostIdDeepRouteImport } from './routes/posts_.$postId.deep'
import { Route as PathlessLayoutNestedLayoutRouteBRouteImport } from './routes/_pathlessLayout/_nested-layout/route-b'
import { Route as PathlessLayoutNestedLayoutRouteARouteImport } from './routes/_pathlessLayout/_nested-layout/route-a'

const ServicesRoute = ServicesRouteImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourcesRoute = ResourcesRouteImport.update({
  id: '/resources',
  path: '/resources',
  getParentRoute: () => rootRouteImport,
} as any)
const RedirectRoute = RedirectRouteImport.update({
  id: '/redirect',
  path: '/redirect',
  getParentRoute: () => rootRouteImport,
} as any)
const FaqRoute = FaqRouteImport.update({
  id: '/faq',
  path: '/faq',
  getParentRoute: () => rootRouteImport,
} as any)
const DeferredRoute = DeferredRouteImport.update({
  id: '/deferred',
  path: '/deferred',
  getParentRoute: () => rootRouteImport,
} as any)
const ContactRoute = ContactRouteImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRouteImport,
} as any)
const CaseStudiesRoute = CaseStudiesRouteImport.update({
  id: '/case-studies',
  path: '/case-studies',
  getParentRoute: () => rootRouteImport,
} as any)
const CareersRoute = CareersRouteImport.update({
  id: '/careers',
  path: '/careers',
  getParentRoute: () => rootRouteImport,
} as any)
const BlogRoute = BlogRouteImport.update({
  id: '/blog',
  path: '/blog',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutRoute = PathlessLayoutRouteImport.update({
  id: '/_pathlessLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersRouteRoute = UsersRouteRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRouteRoute = PostsRouteRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const UsersIndexRoute = UsersIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => UsersRouteRoute,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRouteRoute,
} as any)
const UsersUserIdRoute = UsersUserIdRouteImport.update({
  id: '/$userId',
  path: '/$userId',
  getParentRoute: () => UsersRouteRoute,
} as any)
const ServicesTransformationRoute = ServicesTransformationRouteImport.update({
  id: '/transformation',
  path: '/transformation',
  getParentRoute: () => ServicesRoute,
} as any)
const ServicesConsultingRoute = ServicesConsultingRouteImport.update({
  id: '/consulting',
  path: '/consulting',
  getParentRoute: () => ServicesRoute,
} as any)
const ServicesAutomationRoute = ServicesAutomationRouteImport.update({
  id: '/automation',
  path: '/automation',
  getParentRoute: () => ServicesRoute,
} as any)
const ResourcesWhitepapersRoute = ResourcesWhitepapersRouteImport.update({
  id: '/whitepapers',
  path: '/whitepapers',
  getParentRoute: () => ResourcesRoute,
} as any)
const ResourcesWebinarsRoute = ResourcesWebinarsRouteImport.update({
  id: '/webinars',
  path: '/webinars',
  getParentRoute: () => ResourcesRoute,
} as any)
const PostsPostIdRoute = PostsPostIdRouteImport.update({
  id: '/$postId',
  path: '/$postId',
  getParentRoute: () => PostsRouteRoute,
} as any)
const AboutTeamRoute = AboutTeamRouteImport.update({
  id: '/team',
  path: '/team',
  getParentRoute: () => AboutRoute,
} as any)
const AboutStoryRoute = AboutStoryRouteImport.update({
  id: '/story',
  path: '/story',
  getParentRoute: () => AboutRoute,
} as any)
const PathlessLayoutNestedLayoutRoute =
  PathlessLayoutNestedLayoutRouteImport.update({
    id: '/_nested-layout',
    getParentRoute: () => PathlessLayoutRoute,
  } as any)
const PostsPostIdDeepRoute = PostsPostIdDeepRouteImport.update({
  id: '/posts_/$postId/deep',
  path: '/posts/$postId/deep',
  getParentRoute: () => rootRouteImport,
} as any)
const PathlessLayoutNestedLayoutRouteBRoute =
  PathlessLayoutNestedLayoutRouteBRouteImport.update({
    id: '/route-b',
    path: '/route-b',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)
const PathlessLayoutNestedLayoutRouteARoute =
  PathlessLayoutNestedLayoutRouteARouteImport.update({
    id: '/route-a',
    path: '/route-a',
    getParentRoute: () => PathlessLayoutNestedLayoutRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts': typeof PostsIndexRoute
  '/users': typeof UsersIndexRoute
  '/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/posts': typeof PostsRouteRouteWithChildren
  '/users': typeof UsersRouteRouteWithChildren
  '/_pathlessLayout': typeof PathlessLayoutRouteWithChildren
  '/about': typeof AboutRouteWithChildren
  '/blog': typeof BlogRoute
  '/careers': typeof CareersRoute
  '/case-studies': typeof CaseStudiesRoute
  '/contact': typeof ContactRoute
  '/deferred': typeof DeferredRoute
  '/faq': typeof FaqRoute
  '/redirect': typeof RedirectRoute
  '/resources': typeof ResourcesRouteWithChildren
  '/services': typeof ServicesRouteWithChildren
  '/_pathlessLayout/_nested-layout': typeof PathlessLayoutNestedLayoutRouteWithChildren
  '/about/story': typeof AboutStoryRoute
  '/about/team': typeof AboutTeamRoute
  '/posts/$postId': typeof PostsPostIdRoute
  '/resources/webinars': typeof ResourcesWebinarsRoute
  '/resources/whitepapers': typeof ResourcesWhitepapersRoute
  '/services/automation': typeof ServicesAutomationRoute
  '/services/consulting': typeof ServicesConsultingRoute
  '/services/transformation': typeof ServicesTransformationRoute
  '/users/$userId': typeof UsersUserIdRoute
  '/posts/': typeof PostsIndexRoute
  '/users/': typeof UsersIndexRoute
  '/_pathlessLayout/_nested-layout/route-a': typeof PathlessLayoutNestedLayoutRouteARoute
  '/_pathlessLayout/_nested-layout/route-b': typeof PathlessLayoutNestedLayoutRouteBRoute
  '/posts_/$postId/deep': typeof PostsPostIdDeepRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/posts'
    | '/users'
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts'
    | '/users'
    | '/route-a'
    | '/route-b'
    | '/posts/$postId/deep'
  id:
    | '__root__'
    | '/'
    | '/posts'
    | '/users'
    | '/_pathlessLayout'
    | '/about'
    | '/blog'
    | '/careers'
    | '/case-studies'
    | '/contact'
    | '/deferred'
    | '/faq'
    | '/redirect'
    | '/resources'
    | '/services'
    | '/_pathlessLayout/_nested-layout'
    | '/about/story'
    | '/about/team'
    | '/posts/$postId'
    | '/resources/webinars'
    | '/resources/whitepapers'
    | '/services/automation'
    | '/services/consulting'
    | '/services/transformation'
    | '/users/$userId'
    | '/posts/'
    | '/users/'
    | '/_pathlessLayout/_nested-layout/route-a'
    | '/_pathlessLayout/_nested-layout/route-b'
    | '/posts_/$postId/deep'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsRouteRoute: typeof PostsRouteRouteWithChildren
  UsersRouteRoute: typeof UsersRouteRouteWithChildren
  PathlessLayoutRoute: typeof PathlessLayoutRouteWithChildren
  AboutRoute: typeof AboutRouteWithChildren
  BlogRoute: typeof BlogRoute
  CareersRoute: typeof CareersRoute
  CaseStudiesRoute: typeof CaseStudiesRoute
  ContactRoute: typeof ContactRoute
  DeferredRoute: typeof DeferredRoute
  FaqRoute: typeof FaqRoute
  RedirectRoute: typeof RedirectRoute
  ResourcesRoute: typeof ResourcesRouteWithChildren
  ServicesRoute: typeof ServicesRouteWithChildren
  PostsPostIdDeepRoute: typeof PostsPostIdDeepRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/services': {
      id: '/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof ServicesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resources': {
      id: '/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof ResourcesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/redirect': {
      id: '/redirect'
      path: '/redirect'
      fullPath: '/redirect'
      preLoaderRoute: typeof RedirectRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/faq': {
      id: '/faq'
      path: '/faq'
      fullPath: '/faq'
      preLoaderRoute: typeof FaqRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/deferred': {
      id: '/deferred'
      path: '/deferred'
      fullPath: '/deferred'
      preLoaderRoute: typeof DeferredRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/case-studies': {
      id: '/case-studies'
      path: '/case-studies'
      fullPath: '/case-studies'
      preLoaderRoute: typeof CaseStudiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/careers': {
      id: '/careers'
      path: '/careers'
      fullPath: '/careers'
      preLoaderRoute: typeof CareersRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/blog': {
      id: '/blog'
      path: '/blog'
      fullPath: '/blog'
      preLoaderRoute: typeof BlogRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout': {
      id: '/_pathlessLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users': {
      id: '/users'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/users/': {
      id: '/users/'
      path: '/'
      fullPath: '/users/'
      preLoaderRoute: typeof UsersIndexRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/users/$userId': {
      id: '/users/$userId'
      path: '/$userId'
      fullPath: '/users/$userId'
      preLoaderRoute: typeof UsersUserIdRouteImport
      parentRoute: typeof UsersRouteRoute
    }
    '/services/transformation': {
      id: '/services/transformation'
      path: '/transformation'
      fullPath: '/services/transformation'
      preLoaderRoute: typeof ServicesTransformationRouteImport
      parentRoute: typeof ServicesRoute
    }
    '/services/consulting': {
      id: '/services/consulting'
      path: '/consulting'
      fullPath: '/services/consulting'
      preLoaderRoute: typeof ServicesConsultingRouteImport
      parentRoute: typeof ServicesRoute
    }
    '/services/automation': {
      id: '/services/automation'
      path: '/automation'
      fullPath: '/services/automation'
      preLoaderRoute: typeof ServicesAutomationRouteImport
      parentRoute: typeof ServicesRoute
    }
    '/resources/whitepapers': {
      id: '/resources/whitepapers'
      path: '/whitepapers'
      fullPath: '/resources/whitepapers'
      preLoaderRoute: typeof ResourcesWhitepapersRouteImport
      parentRoute: typeof ResourcesRoute
    }
    '/resources/webinars': {
      id: '/resources/webinars'
      path: '/webinars'
      fullPath: '/resources/webinars'
      preLoaderRoute: typeof ResourcesWebinarsRouteImport
      parentRoute: typeof ResourcesRoute
    }
    '/posts/$postId': {
      id: '/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdRouteImport
      parentRoute: typeof PostsRouteRoute
    }
    '/about/team': {
      id: '/about/team'
      path: '/team'
      fullPath: '/about/team'
      preLoaderRoute: typeof AboutTeamRouteImport
      parentRoute: typeof AboutRoute
    }
    '/about/story': {
      id: '/about/story'
      path: '/story'
      fullPath: '/about/story'
      preLoaderRoute: typeof AboutStoryRouteImport
      parentRoute: typeof AboutRoute
    }
    '/_pathlessLayout/_nested-layout': {
      id: '/_pathlessLayout/_nested-layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteImport
      parentRoute: typeof PathlessLayoutRoute
    }
    '/posts_/$postId/deep': {
      id: '/posts_/$postId/deep'
      path: '/posts/$postId/deep'
      fullPath: '/posts/$postId/deep'
      preLoaderRoute: typeof PostsPostIdDeepRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_pathlessLayout/_nested-layout/route-b': {
      id: '/_pathlessLayout/_nested-layout/route-b'
      path: '/route-b'
      fullPath: '/route-b'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteBRouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
    '/_pathlessLayout/_nested-layout/route-a': {
      id: '/_pathlessLayout/_nested-layout/route-a'
      path: '/route-a'
      fullPath: '/route-a'
      preLoaderRoute: typeof PathlessLayoutNestedLayoutRouteARouteImport
      parentRoute: typeof PathlessLayoutNestedLayoutRoute
    }
  }
}

interface PostsRouteRouteChildren {
  PostsPostIdRoute: typeof PostsPostIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteRouteChildren: PostsRouteRouteChildren = {
  PostsPostIdRoute: PostsPostIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteRouteWithChildren = PostsRouteRoute._addFileChildren(
  PostsRouteRouteChildren,
)

interface UsersRouteRouteChildren {
  UsersUserIdRoute: typeof UsersUserIdRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const UsersRouteRouteChildren: UsersRouteRouteChildren = {
  UsersUserIdRoute: UsersUserIdRoute,
  UsersIndexRoute: UsersIndexRoute,
}

const UsersRouteRouteWithChildren = UsersRouteRoute._addFileChildren(
  UsersRouteRouteChildren,
)

interface PathlessLayoutNestedLayoutRouteChildren {
  PathlessLayoutNestedLayoutRouteARoute: typeof PathlessLayoutNestedLayoutRouteARoute
  PathlessLayoutNestedLayoutRouteBRoute: typeof PathlessLayoutNestedLayoutRouteBRoute
}

const PathlessLayoutNestedLayoutRouteChildren: PathlessLayoutNestedLayoutRouteChildren =
  {
    PathlessLayoutNestedLayoutRouteARoute:
      PathlessLayoutNestedLayoutRouteARoute,
    PathlessLayoutNestedLayoutRouteBRoute:
      PathlessLayoutNestedLayoutRouteBRoute,
  }

const PathlessLayoutNestedLayoutRouteWithChildren =
  PathlessLayoutNestedLayoutRoute._addFileChildren(
    PathlessLayoutNestedLayoutRouteChildren,
  )

interface PathlessLayoutRouteChildren {
  PathlessLayoutNestedLayoutRoute: typeof PathlessLayoutNestedLayoutRouteWithChildren
}

const PathlessLayoutRouteChildren: PathlessLayoutRouteChildren = {
  PathlessLayoutNestedLayoutRoute: PathlessLayoutNestedLayoutRouteWithChildren,
}

const PathlessLayoutRouteWithChildren = PathlessLayoutRoute._addFileChildren(
  PathlessLayoutRouteChildren,
)

interface AboutRouteChildren {
  AboutStoryRoute: typeof AboutStoryRoute
  AboutTeamRoute: typeof AboutTeamRoute
}

const AboutRouteChildren: AboutRouteChildren = {
  AboutStoryRoute: AboutStoryRoute,
  AboutTeamRoute: AboutTeamRoute,
}

const AboutRouteWithChildren = AboutRoute._addFileChildren(AboutRouteChildren)

interface ResourcesRouteChildren {
  ResourcesWebinarsRoute: typeof ResourcesWebinarsRoute
  ResourcesWhitepapersRoute: typeof ResourcesWhitepapersRoute
}

const ResourcesRouteChildren: ResourcesRouteChildren = {
  ResourcesWebinarsRoute: ResourcesWebinarsRoute,
  ResourcesWhitepapersRoute: ResourcesWhitepapersRoute,
}

const ResourcesRouteWithChildren = ResourcesRoute._addFileChildren(
  ResourcesRouteChildren,
)

interface ServicesRouteChildren {
  ServicesAutomationRoute: typeof ServicesAutomationRoute
  ServicesConsultingRoute: typeof ServicesConsultingRoute
  ServicesTransformationRoute: typeof ServicesTransformationRoute
}

const ServicesRouteChildren: ServicesRouteChildren = {
  ServicesAutomationRoute: ServicesAutomationRoute,
  ServicesConsultingRoute: ServicesConsultingRoute,
  ServicesTransformationRoute: ServicesTransformationRoute,
}

const ServicesRouteWithChildren = ServicesRoute._addFileChildren(
  ServicesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsRouteRoute: PostsRouteRouteWithChildren,
  UsersRouteRoute: UsersRouteRouteWithChildren,
  PathlessLayoutRoute: PathlessLayoutRouteWithChildren,
  AboutRoute: AboutRouteWithChildren,
  BlogRoute: BlogRoute,
  CareersRoute: CareersRoute,
  CaseStudiesRoute: CaseStudiesRoute,
  ContactRoute: ContactRoute,
  DeferredRoute: DeferredRoute,
  FaqRoute: FaqRoute,
  RedirectRoute: RedirectRoute,
  ResourcesRoute: ResourcesRouteWithChildren,
  ServicesRoute: ServicesRouteWithChildren,
  PostsPostIdDeepRoute: PostsPostIdDeepRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
